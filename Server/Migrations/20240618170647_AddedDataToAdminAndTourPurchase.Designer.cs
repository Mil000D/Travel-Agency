// <auto-generated />
using System;
using MASProject.Server.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MASProject.Server.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20240618170647_AddedDataToAdminAndTourPurchase")]
    partial class AddedDataToAdminAndTourPurchase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.20");

            modelBuilder.Entity("MASProject.Server.Models.LodgingModels.Lodging", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Amenities")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("BreakfastIncluded")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("LodgingType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("OfficialWebsiteURL")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("PetFriendly")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Stars")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Lodgings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "750 S Navajo Dr, Page, AZ 86040, USA",
                            Amenities = "Free Wi-Fi#Free parking#Air-conditioned#Laundry service#Kid-friendly#Pet-friendly",
                            Description = "Set 2 miles from Glen Canyon Dam Overlook at Lake Powell, this unfussy motel is 8 minutes' walk from the Powell Museum, and 5 miles from Lake Powell Navajo Tribal Park.",
                            Email = "lakepowellhotel@gmail.com",
                            LodgingType = 0,
                            Name = "Lake Powell Hotel",
                            OfficialWebsiteURL = "https://lakepowellmotel.net/",
                            PhoneNumber = "19286459362",
                            Stars = 3
                        },
                        new
                        {
                            Id = 2,
                            Address = "7280 Lundy's Ln, Niagara Falls, ON L2G 1W2, Canada",
                            BreakfastIncluded = true,
                            Description = "Beatiful inn next to Niagra Falls",
                            Email = "niagarafalls@gmail.com",
                            LodgingType = 1,
                            Name = "Niagara Falls Inn Near The Falls",
                            PetFriendly = true,
                            PhoneNumber = "19053583621",
                            Stars = 4
                        },
                        new
                        {
                            Id = 3,
                            Address = "149 AZ-64, Grand Canyon Village, AZ 86023, United States",
                            Amenities = "Free Wi-Fi#Free parking#Air-conditioned#Laundry service#Kid-friendly#Pet-friendly",
                            Description = "This rustic lodge-style hotel is 2 miles from Grand Canyon National Park and a 6-minute walk from the Grand Canyon Imax Theatre.",
                            Email = "grandcanyon@hotel.com",
                            LodgingType = 0,
                            Name = "The Grand Hotel at the Grand Canyon",
                            OfficialWebsiteURL = "http://www.grandcanyongrandhotel.com/",
                            PhoneNumber = "14286383333",
                            Stars = 4
                        },
                        new
                        {
                            Id = 4,
                            Address = "150 N Lake Powell Blvd, Page, AZ 86040, United States",
                            BreakfastIncluded = false,
                            Description = "Beatiful inn next to Horseshoe Bend",
                            Email = "innpowell@canyon.com",
                            LodgingType = 1,
                            Name = "Lake Powell Canyon Inn",
                            PetFriendly = false,
                            PhoneNumber = "18286452416"
                        },
                        new
                        {
                            Id = 5,
                            Address = "1 Grand Loop Rd, Yellowstone National Park, WY 82190, United States",
                            Amenities = "Free Wi-Fi#Free parking#Air-conditioned#Laundry service#Kid-friendly#Pet-friendly",
                            Description = "This rustic lodge-style hotel is 2 miles from Grand Canyon National Park and a 6-minute walk from the Grand Canyon Imax Theatre.",
                            Email = "yellowstone@hotel.com",
                            LodgingType = 0,
                            Name = "Yellowstone Hotel",
                            OfficialWebsiteURL = "http://www.yellowstonehotel.com/",
                            PhoneNumber = "111213183333",
                            Stars = 4
                        },
                        new
                        {
                            Id = 6,
                            Address = "1 Ahwahnee Dr, Yosemite Valley, CA 95389, United States",
                            Amenities = "Free Wi-Fi#Free parking#Air-conditioned#Laundry service#Kid-friendly#Pet-friendly",
                            Description = "This rustic lodge-style hotel is 2 miles from Grand Canyon National Park and a 6-minute walk from the Grand Canyon Imax Theatre.",
                            Email = "ahwahnee@gmail.com",
                            LodgingType = 0,
                            Name = "The Ahwahnee",
                            OfficialWebsiteURL = "http://www.ahwahnee.com/",
                            PhoneNumber = "1943434383333",
                            Stars = 4
                        },
                        new
                        {
                            Id = 7,
                            Address = "1 Zion Park Blvd, Springdale, UT 84767, United States",
                            Amenities = "Free Wi-Fi#Free parking#Air-conditioned#Laundry service#Kid-friendly#Pet-friendly",
                            Description = "This rustic lodge-style hotel is 2 miles from Grand Canyon National Park and a 6-minute walk from the Grand Canyon Imax Theatre.",
                            Email = "zion@gmail.com",
                            LodgingType = 0,
                            Name = "Zion National Park Lodge",
                            OfficialWebsiteURL = "http://www.zionlodge.com/",
                            PhoneNumber = "11322343333",
                            Stars = 4
                        },
                        new
                        {
                            Id = 8,
                            Address = "Highway 63, Bryce Canyon National Park, UT 84764, United States",
                            BreakfastIncluded = false,
                            Description = "This rustic lodge-style inn is 2 miles from Grand Canyon National Park and a 6-minute walk from the Grand Canyon Imax Theatre.",
                            Email = "bryce@canyon.com",
                            LodgingType = 1,
                            Name = "Bryce Canyon Inn",
                            PetFriendly = true,
                            PhoneNumber = "19281113333",
                            Stars = 4
                        },
                        new
                        {
                            Id = 9,
                            Address = "US-163, Oljato-Monument Valley, UT 84536, United States",
                            BreakfastIncluded = false,
                            Description = "This rustic lodge-style inn is 2 miles from Grand Canyon National Park and a 6-minute walk from the Grand Canyon Imax Theatre.",
                            Email = "monument@valley.com",
                            LodgingType = 1,
                            Name = "Monument Valley Inn",
                            PetFriendly = true,
                            PhoneNumber = "12323413333",
                            Stars = 4
                        },
                        new
                        {
                            Id = 10,
                            Address = "Moab, UT 84532, United States",
                            BreakfastIncluded = false,
                            Description = "This rustic lodge-style inn is 2 miles from Grand Canyon National Park and a 6-minute walk from the Grand Canyon Imax Theatre.",
                            Email = "arches@gmail.com",
                            LodgingType = 1,
                            Name = "Arches National Park Inn",
                            PetFriendly = true,
                            PhoneNumber = "128888667633",
                            Stars = 4
                        },
                        new
                        {
                            Id = 11,
                            Address = "Moab, UT 84532, United States",
                            BreakfastIncluded = true,
                            Description = "This rustic lodge-style inn is 2 miles from Grand Canyon National Park and a 6-minute walk from the Grand Canyon Imax Theatre.",
                            Email = "canyonlands@gmail.com",
                            LodgingType = 1,
                            Name = "Canyonlands National Park Inn",
                            PetFriendly = true,
                            PhoneNumber = "132328667633",
                            Stars = 4
                        });
                });

            modelBuilder.Entity("MASProject.Server.Models.LodgingModels.LodgingBooking", b =>
                {
                    b.Property<int>("TourId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LodgingId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("CheckInDate")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("CheckOutDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("TourId", "LodgingId");

                    b.HasIndex("LodgingId");

                    b.ToTable("LodgingBookings");

                    b.HasData(
                        new
                        {
                            TourId = 1,
                            LodgingId = 1,
                            CheckInDate = new DateOnly(2025, 1, 1),
                            CheckOutDate = new DateOnly(2025, 2, 2),
                            MaxCapacity = 1,
                            Price = 1000f,
                            RoomType = "Single"
                        },
                        new
                        {
                            TourId = 2,
                            LodgingId = 2,
                            CheckInDate = new DateOnly(2025, 3, 1),
                            CheckOutDate = new DateOnly(2025, 4, 2),
                            MaxCapacity = 2,
                            Price = 1000f,
                            RoomType = "Double"
                        },
                        new
                        {
                            TourId = 3,
                            LodgingId = 3,
                            CheckInDate = new DateOnly(2025, 4, 1),
                            CheckOutDate = new DateOnly(2025, 5, 2),
                            MaxCapacity = 1,
                            Price = 500f,
                            RoomType = "Single"
                        },
                        new
                        {
                            TourId = 4,
                            LodgingId = 4,
                            CheckInDate = new DateOnly(2025, 5, 1),
                            CheckOutDate = new DateOnly(2025, 6, 2),
                            MaxCapacity = 2,
                            Price = 2000f,
                            RoomType = "Double"
                        },
                        new
                        {
                            TourId = 5,
                            LodgingId = 4,
                            CheckInDate = new DateOnly(2025, 6, 1),
                            CheckOutDate = new DateOnly(2025, 7, 2),
                            MaxCapacity = 1,
                            Price = 1000f,
                            RoomType = "Single"
                        },
                        new
                        {
                            TourId = 6,
                            LodgingId = 5,
                            CheckInDate = new DateOnly(2025, 7, 1),
                            CheckOutDate = new DateOnly(2025, 8, 2),
                            MaxCapacity = 2,
                            Price = 1000f,
                            RoomType = "Double"
                        },
                        new
                        {
                            TourId = 7,
                            LodgingId = 6,
                            CheckInDate = new DateOnly(2025, 8, 1),
                            CheckOutDate = new DateOnly(2025, 9, 2),
                            MaxCapacity = 1,
                            Price = 500f,
                            RoomType = "Single"
                        },
                        new
                        {
                            TourId = 8,
                            LodgingId = 7,
                            CheckInDate = new DateOnly(2025, 9, 1),
                            CheckOutDate = new DateOnly(2025, 10, 2),
                            MaxCapacity = 2,
                            Price = 2000f,
                            RoomType = "Double"
                        },
                        new
                        {
                            TourId = 9,
                            LodgingId = 8,
                            CheckInDate = new DateOnly(2025, 10, 1),
                            CheckOutDate = new DateOnly(2025, 11, 2),
                            MaxCapacity = 1,
                            Price = 1000f,
                            RoomType = "Single"
                        },
                        new
                        {
                            TourId = 10,
                            LodgingId = 9,
                            CheckInDate = new DateOnly(2025, 11, 1),
                            CheckOutDate = new DateOnly(2025, 12, 2),
                            MaxCapacity = 2,
                            Price = 1000f,
                            RoomType = "Double"
                        },
                        new
                        {
                            TourId = 11,
                            LodgingId = 10,
                            CheckInDate = new DateOnly(2025, 12, 1),
                            CheckOutDate = new DateOnly(2026, 1, 2),
                            MaxCapacity = 1,
                            Price = 500f,
                            RoomType = "Single"
                        },
                        new
                        {
                            TourId = 12,
                            LodgingId = 11,
                            CheckInDate = new DateOnly(2026, 1, 1),
                            CheckOutDate = new DateOnly(2026, 2, 2),
                            MaxCapacity = 2,
                            Price = 2000f,
                            RoomType = "Double"
                        });
                });

            modelBuilder.Entity("MASProject.Server.Models.TourModels.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagesURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Popularity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Discover the lesser-traveled depths of Antelope Canyon on a walking tour through the lower portions of this colorful sandstone slot canyon.",
                            ImagesURL = "https://media-cdn.tripadvisor.com/media/attractions-splice-spp-720x480/07/7f/67/da.jpg https://dynamic-media-cdn.tripadvisor.com/media/photo-o/2c/90/31/4c/caption.jpg https://dynamic-media-cdn.tripadvisor.com/media/photo-o/2c/8f/68/c5/caption.jpg https://dynamic-media-cdn.tripadvisor.com/media/photo-o/2c/8f/68/ca/caption.jpg",
                            Popularity = 1,
                            Title = "Lower Antelope Canyon"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Discover the highlights of several cities in the Northeast on this 4-day sightseeing tour by bus or minivan from Boston.",
                            ImagesURL = "https://dynamic-media-cdn.tripadvisor.com/media/photo-o/0d/46/b6/9c/20161010-133807-largejpg.jpg https://dynamic-media-cdn.tripadvisor.com/media/photo-o/0c/7d/1f/18/photo3jpg.jpg https://dynamic-media-cdn.tripadvisor.com/media/photo-o/0e/d4/be/31/view-from-one-of-the_rotated_90.jpg",
                            Popularity = 1,
                            Title = "Niagara Falls"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Ideal for travelers short on time, this tour covers the Grand Canyon’s South Rim in one day of sightseeing from Las Vegas.",
                            ImagesURL = "https://media-cdn.tripadvisor.com/media/attractions-splice-spp-720x480/0a/9a/19/33.jpg https://media-cdn.tripadvisor.com/media/attractions-splice-spp-720x480/0a/9a/19/3e.jpg",
                            Popularity = 1,
                            Title = "Grand Canyon"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Journey to Horseshoe Bend on a guided tour that includes all your entrance fees, round-trip transport from Flagstaff, and a picnic lunch.",
                            ImagesURL = "https://dynamic-media-cdn.tripadvisor.com/media/photo-o/17/56/c1/06/horseshoe-bend-az.jpg",
                            Popularity = 1,
                            Title = "Horseshoe Bend"
                        },
                        new
                        {
                            Id = 5,
                            Description = "This man-made reservoir, located in northern Arizona and southern Utah, is a great spot for travelers seeking nature and outdoor adventure.",
                            ImagesURL = "https://dynamic-media-cdn.tripadvisor.com/media/photo-o/0e/91/5b/02/morning-at-the-lake-powell.jpg",
                            Popularity = 1,
                            Title = "Lake Powell"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Avoid crowds and maximize your wildlife-viewing experience on this private Yellowstone tour led by a naturalist guide.",
                            ImagesURL = "https://media-cdn.tripadvisor.com/media/attractions-splice-spp-720x480/10/8e/af/dd.jpg",
                            Popularity = 1,
                            Title = "Yellowstone Tour"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Immerse yourself in the majestic beauty of Yosemite National Park on this 2-day overnight adventure from San Francisco. Great way to spend holidays.",
                            ImagesURL = "https://media-cdn.tripadvisor.com/media/attractions-splice-spp-720x480/0b/2b/8a/7e.jpg",
                            Popularity = 1,
                            Title = "Yosemite Valley"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Explore the Incredible Narrows portion of Zion National Park without the risk of getting lost on this private full-day tour. A fun day out for travelers.",
                            ImagesURL = "https://media-cdn.tripadvisor.com/media/attractions-splice-spp-720x480/0f/2c/ff/9e.jpg",
                            Popularity = 1,
                            Title = "The Narrows"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Discover the stunning landscape of Bryce Canyon National Park on a full-day tour from Las Vegas that features a scenic round-trip journey by air.",
                            ImagesURL = "https://media-cdn.tripadvisor.com/media/attractions-splice-spp-720x480/0a/af/93/2e.jpg https://media-cdn.tripadvisor.com/media/attractions-splice-spp-720x480/0a/af/93/36.jpg",
                            Title = "Bryce Canyon"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Explore Monument Valley Navajo Tribal Park on a full-day tour that features a visit to the Navajo Nation’s largest trading post.",
                            ImagesURL = "https://dynamic-media-cdn.tripadvisor.com/media/photo-o/21/de/5b/97/caption.jpg https://dynamic-media-cdn.tripadvisor.com/media/photo-o/21/de/5b/c2/caption.jpg",
                            Title = "Monument Valley"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Discover the natural beauty of Arches National Park on this tour from Moab. A great way to spend a day out.",
                            ImagesURL = "https://media-cdn.tripadvisor.com/media/attractions-splice-spp-720x480/07/79/64/21.jpg",
                            Title = "Arches National Park"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Discover the natural beauty of Canyonlands National Park on this tour from Moab. A great way to spend a day out.",
                            ImagesURL = "https://dynamic-media-cdn.tripadvisor.com/media/photo-o/0e/dc/dd/3d/mesa-arch-view.jpg",
                            Title = "Canyonlands National Park"
                        });
                });

            modelBuilder.Entity("MASProject.Server.Models.TourModels.TourPurchase", b =>
                {
                    b.Property<int>("TourId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TourStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("TourId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("TourPurchases");

                    b.HasData(
                        new
                        {
                            TourId = 1,
                            CustomerId = 1,
                            PaymentDate = new DateOnly(2024, 10, 1),
                            PaymentMethod = 2,
                            TourStatus = 1
                        },
                        new
                        {
                            TourId = 2,
                            CustomerId = 2,
                            PaymentDate = new DateOnly(2024, 9, 2),
                            PaymentMethod = 1,
                            TourStatus = 1
                        },
                        new
                        {
                            TourId = 3,
                            CustomerId = 3,
                            PaymentDate = new DateOnly(2024, 8, 3),
                            PaymentMethod = 0,
                            TourStatus = 1
                        },
                        new
                        {
                            TourId = 4,
                            CustomerId = 4,
                            PaymentDate = new DateOnly(2024, 7, 4),
                            PaymentMethod = 2,
                            TourStatus = 1
                        },
                        new
                        {
                            TourId = 5,
                            CustomerId = 4,
                            PaymentDate = new DateOnly(2024, 8, 5),
                            PaymentMethod = 1,
                            TourStatus = 1
                        },
                        new
                        {
                            TourId = 6,
                            CustomerId = 3,
                            PaymentDate = new DateOnly(2024, 9, 6),
                            PaymentMethod = 0,
                            TourStatus = 1
                        },
                        new
                        {
                            TourId = 7,
                            CustomerId = 2,
                            PaymentDate = new DateOnly(2024, 10, 7),
                            PaymentMethod = 2,
                            TourStatus = 1
                        },
                        new
                        {
                            TourId = 8,
                            CustomerId = 1,
                            PaymentDate = new DateOnly(2024, 11, 8),
                            PaymentMethod = 1,
                            TourStatus = 1
                        });
                });

            modelBuilder.Entity("MASProject.Server.Models.TransportModels.Transport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AirConditioning")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CargoCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxSpeed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransportType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Transports");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Transport");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MASProject.Server.Models.TransportModels.TransportBooking", b =>
                {
                    b.Property<int>("TourId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransportId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("TourId", "TransportId");

                    b.HasIndex("TransportId");

                    b.ToTable("TransportBookings");

                    b.HasData(
                        new
                        {
                            TourId = 1,
                            TransportId = 1,
                            ArrivalTime = new DateTime(2024, 12, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 12, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Lagos",
                            Origin = "Abuja",
                            Price = 5000f
                        },
                        new
                        {
                            TourId = 2,
                            TransportId = 2,
                            ArrivalTime = new DateTime(2024, 12, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 12, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Niagara Falls",
                            Origin = "Toronto",
                            Price = 100f
                        },
                        new
                        {
                            TourId = 3,
                            TransportId = 3,
                            ArrivalTime = new DateTime(2024, 12, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 12, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Grand Canyon",
                            Origin = "Las Vegas",
                            Price = 200f
                        },
                        new
                        {
                            TourId = 4,
                            TransportId = 4,
                            ArrivalTime = new DateTime(2024, 12, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 12, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Horseshoe Bend",
                            Origin = "Las Vegas",
                            Price = 200f
                        },
                        new
                        {
                            TourId = 5,
                            TransportId = 5,
                            ArrivalTime = new DateTime(2024, 12, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 12, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Lake Powell",
                            Origin = "Las Vegas",
                            Price = 200f
                        },
                        new
                        {
                            TourId = 6,
                            TransportId = 6,
                            ArrivalTime = new DateTime(2024, 12, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 12, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Yellowstone National Park",
                            Origin = "Washington DC",
                            Price = 200f
                        },
                        new
                        {
                            TourId = 7,
                            TransportId = 7,
                            ArrivalTime = new DateTime(2024, 12, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 12, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Yosemite Valley",
                            Origin = "San Francisco",
                            Price = 200f
                        },
                        new
                        {
                            TourId = 8,
                            TransportId = 8,
                            ArrivalTime = new DateTime(2024, 12, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 12, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "The Narrows",
                            Origin = "New York",
                            Price = 200f
                        },
                        new
                        {
                            TourId = 9,
                            TransportId = 9,
                            ArrivalTime = new DateTime(2024, 12, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 12, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Bryce Canyon National Park",
                            Origin = "Las Vegas",
                            Price = 200f
                        },
                        new
                        {
                            TourId = 10,
                            TransportId = 10,
                            ArrivalTime = new DateTime(2024, 12, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 12, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Monument Valley",
                            Origin = "California",
                            Price = 200f
                        },
                        new
                        {
                            TourId = 11,
                            TransportId = 11,
                            ArrivalTime = new DateTime(2024, 12, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 12, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Arches National Park",
                            Origin = "Las Vegas",
                            Price = 200f
                        },
                        new
                        {
                            TourId = 12,
                            TransportId = 12,
                            ArrivalTime = new DateTime(2024, 12, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 12, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Canyonlands National Park",
                            Origin = "Washington DC",
                            Price = 200f
                        });
                });

            modelBuilder.Entity("MASProject.Server.Models.UserModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MASProject.Server.Models.TransportModels.Plane", b =>
                {
                    b.HasBaseType("MASProject.Server.Models.TransportModels.Transport");

                    b.Property<string>("Amenities")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Plane");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 660,
                            CargoCapacity = 875,
                            Company = "Alaska Airlines",
                            Description = "The Boeing 747 is a large, long–range wide-body airliner designed and manufactured by Boeing Commercial Airplanes in the United States. It is among the world's most recognizable aircraft and was the first wide-body produced. Manufactured from 1968 to 2021, the 747 held the passenger capacity record for 37 years.",
                            MaxSpeed = 614,
                            TransportType = 0,
                            Amenities = "Wi-Fi#In-flight entertainment#Power outlets",
                            Model = "Boeing 747"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 853,
                            CargoCapacity = 1500,
                            Company = "American Airlines",
                            Description = "The Airbus A380 is a wide-body aircraft manufactured by Airbus. It is the world's largest passenger airliner. Airbus studies started in 1988 and the project was announced in 1990 to challenge the dominance of the Boeing 747 in the long haul market.",
                            MaxSpeed = 587,
                            TransportType = 0,
                            Amenities = "Wi-Fi#In-flight entertainment#Power outlets",
                            Model = "Airbus A380"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 550,
                            CargoCapacity = 1000,
                            Company = "Allegiant Air",
                            Description = "The Boeing 777 is a wide-body airliner developed and manufactured by Boeing Commercial Airplanes. It is the world's largest twinjet. The 777 was designed to bridge the gap between Boeing's other wide-body airliners and the 747.",
                            MaxSpeed = 590,
                            TransportType = 0,
                            Amenities = "Wi-Fi#In-flight entertainment#Power outlets",
                            Model = "Boeing 777"
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 440,
                            CargoCapacity = 1000,
                            Company = "American Airlines",
                            Description = "The Airbus A350 is a long-range, wide-body jet airliner developed by Airbus. The A350 is the first Airbus aircraft with both fuselage and wing structures made primarily of carbon-fibre-reinforced polymer. Its variants seat 280 to 366 passengers in typical three-class seating layouts.",
                            MaxSpeed = 567,
                            TransportType = 0,
                            Amenities = "Wi-Fi#In-flight entertainment#Power outlets",
                            Model = "Airbus A350"
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 330,
                            CargoCapacity = 1000,
                            Company = "Frontier Airlines",
                            Description = "The Boeing 787 Dreamliner is an American wide-body jet airliner manufactured by Boeing Commercial Airplanes. Launched in April 2004, the 787 was designed to be more fuel-efficient than the Boeing 767, which it was intended to replace. The 787 Dreamliner's distinguishing features include mostly electrical flight systems, raked wingtips, and noise-reducing chevrons on its engine nacelles.",
                            MaxSpeed = 593,
                            TransportType = 0,
                            Amenities = "Wi-Fi#In-flight entertainment#Power outlets",
                            Model = "Boeing 787"
                        });
                });

            modelBuilder.Entity("MASProject.Server.Models.TransportModels.Train", b =>
                {
                    b.HasBaseType("MASProject.Server.Models.TransportModels.Transport");

                    b.Property<int>("Classes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TrainNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Train");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            AirConditioning = true,
                            Capacity = 100,
                            Company = "Amtrak",
                            Description = "The National Railroad Passenger Corporation, doing business as Amtrak (reporting marks AMTK, AMTZ), is the national passenger railroad company of the United States.",
                            TransportType = 1,
                            Classes = 3,
                            TrainNumber = "Q621-5"
                        },
                        new
                        {
                            Id = 7,
                            AirConditioning = true,
                            Capacity = 200,
                            Company = "BNSF Railway",
                            Description = "BNSF Railway (reporting mark BNSF) is the largest freight railroad in the United States. One of six North American Class I railroads, BNSF has 36,000 employees, 33,400 miles (53,800 km) of track in 28 states, and over 8,000 locomotives.",
                            TransportType = 1,
                            Classes = 4,
                            TrainNumber = "S321-5"
                        },
                        new
                        {
                            Id = 8,
                            AirConditioning = false,
                            Capacity = 300,
                            Company = "Union Railroad",
                            Description = "The Union Pacific Railroad (reporting mark UP) is a Class I line haul freight railroad that operates 8,300 locomotives over 31,800 route-miles in 23 states west of Chicago and New Orleans.",
                            TransportType = 1,
                            Classes = 4,
                            TrainNumber = "U321-5"
                        },
                        new
                        {
                            Id = 9,
                            AirConditioning = true,
                            Capacity = 100,
                            Company = "Canadian Railway",
                            Description = "The Canadian National Railway Company (reporting mark CN) is a Canadian Class I freight railway headquartered in Montreal, Quebec, which serves Canada and the Midwestern and Southern United States.",
                            TransportType = 1,
                            Classes = 4,
                            TrainNumber = "C321-5"
                        },
                        new
                        {
                            Id = 10,
                            AirConditioning = true,
                            Capacity = 100,
                            Company = "Kansas Railway",
                            Description = "The Kansas City Southern Railway Company (reporting mark KCS) is an American Class I railroad that operates over 3,300 route miles (5,300 km) in 10 states in the central and southern United States.",
                            TransportType = 1,
                            Classes = 4,
                            TrainNumber = "K321-5"
                        },
                        new
                        {
                            Id = 11,
                            AirConditioning = true,
                            Capacity = 100,
                            Company = "Norfolk Railway",
                            Description = "The Norfolk Southern Railway (reporting mark NS) is a Class I freight railroad in the United States. With headquarters in Atlanta, Georgia, the company operates 19,420 route miles (31,250 km) in 22 eastern states, the District of Columbia, and has rights in Canada over the Albany to Montréal route of the Canadian Pacific Railway, and previously on CN from Buffalo to St. Thomas.",
                            TransportType = 1,
                            Classes = 4,
                            TrainNumber = "N321-5"
                        },
                        new
                        {
                            Id = 12,
                            AirConditioning = true,
                            Capacity = 100,
                            Company = "CSX",
                            Description = "The CSX Transportation (reporting mark CSXT) is a Class I freight railroad operating in the eastern United States and the Canadian provinces of Ontario and Quebec. The railroad operates approximately 21,000 route miles (34,000 km) of track.",
                            TransportType = 1,
                            Classes = 4,
                            TrainNumber = "C321-5"
                        });
                });

            modelBuilder.Entity("MASProject.Server.Models.UserModels.Admin", b =>
                {
                    b.HasBaseType("MASProject.Server.Models.UserModels.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            BirthDate = new DateOnly(1, 1, 1),
                            Name = "Ryan",
                            Password = "password",
                            Surname = "Doe",
                            Username = "adminryan"
                        },
                        new
                        {
                            Id = 6,
                            BirthDate = new DateOnly(1, 1, 1),
                            Name = "Jack",
                            Password = "password",
                            Surname = "Doe",
                            Username = "admindoe"
                        },
                        new
                        {
                            Id = 7,
                            BirthDate = new DateOnly(1, 1, 1),
                            Name = "Alice",
                            Password = "password",
                            Surname = "Doe",
                            Username = "adminalice"
                        },
                        new
                        {
                            Id = 8,
                            BirthDate = new DateOnly(1, 1, 1),
                            Name = "Ethan",
                            Password = "password",
                            Surname = "Smith",
                            Username = "adminethan"
                        });
                });

            modelBuilder.Entity("MASProject.Server.Models.UserModels.Customer", b =>
                {
                    b.HasBaseType("MASProject.Server.Models.UserModels.User");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateOnly(1, 1, 1),
                            Name = "John",
                            Password = "password",
                            Surname = "Doe",
                            Username = "johndoe",
                            Email = "john@doe.com",
                            PhoneNumber = "123456789"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateOnly(1, 1, 1),
                            Name = "Jane",
                            Password = "password",
                            Surname = "Doe",
                            Username = "janedoe",
                            Email = "jane@doe.com",
                            PhoneNumber = "987654321"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateOnly(1, 1, 1),
                            Name = "Alice",
                            Password = "password",
                            Surname = "Smith",
                            Username = "alicesmith",
                            Email = "alice@smith.com",
                            PhoneNumber = "123123123"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateOnly(1, 1, 1),
                            Name = "Bob",
                            Password = "password",
                            Surname = "Smith",
                            Username = "bobsmith",
                            Email = "bob@smith.com",
                            PhoneNumber = "456456456"
                        });
                });

            modelBuilder.Entity("MASProject.Server.Models.LodgingModels.LodgingBooking", b =>
                {
                    b.HasOne("MASProject.Server.Models.LodgingModels.Lodging", "Lodging")
                        .WithMany("LodgingBookings")
                        .HasForeignKey("LodgingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MASProject.Server.Models.TourModels.Tour", "Tour")
                        .WithMany("LodgingBookings")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lodging");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("MASProject.Server.Models.TourModels.TourPurchase", b =>
                {
                    b.HasOne("MASProject.Server.Models.UserModels.Customer", "Customer")
                        .WithMany("TourPurchases")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MASProject.Server.Models.TourModels.Tour", "Tour")
                        .WithMany("TourPurchases")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("MASProject.Server.Models.TransportModels.TransportBooking", b =>
                {
                    b.HasOne("MASProject.Server.Models.TourModels.Tour", "Tour")
                        .WithMany("TransportBookings")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MASProject.Server.Models.TransportModels.Transport", "Transport")
                        .WithMany("TransportBookings")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("MASProject.Server.Models.LodgingModels.Lodging", b =>
                {
                    b.Navigation("LodgingBookings");
                });

            modelBuilder.Entity("MASProject.Server.Models.TourModels.Tour", b =>
                {
                    b.Navigation("LodgingBookings");

                    b.Navigation("TourPurchases");

                    b.Navigation("TransportBookings");
                });

            modelBuilder.Entity("MASProject.Server.Models.TransportModels.Transport", b =>
                {
                    b.Navigation("TransportBookings");
                });

            modelBuilder.Entity("MASProject.Server.Models.UserModels.Customer", b =>
                {
                    b.Navigation("TourPurchases");
                });
#pragma warning restore 612, 618
        }
    }
}
