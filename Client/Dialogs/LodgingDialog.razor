@inject HttpClient HttpClient
@if(LodgingBookingDTO == null || _lodgings == null || _lodgings.Count == 0)
{
    <DialogSkeleton/>
}
else
{
    <EditForm Model="LodgingBookingDTO" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <MudDialog>
            <DialogContent>
                <MudSelect For="@(() => LodgingBookingDTO.Lodging)" T="LodgingDTO" @bind-Value="@LodgingBookingDTO.Lodging" ToStringFunc="@converter" Label="Select Lodging" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Apartment" AdornmentColor="Color.Dark" Required="true">
                    @foreach (LodgingDTO item in _lodgings)
                    {
                        <MudSelectItem Value="@item">@item.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField For="@(() => LodgingBookingDTO.RoomType)" @bind-Value="LodgingBookingDTO.RoomType" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Hotel" AdornmentColor="Color.Dark" Label="Room Type" Required="true" />
                <MudTextField For="@(() => LodgingBookingDTO.MaxCapacity)" @bind-Value="LodgingBookingDTO.MaxCapacity" Label="Max Capacity" InputType="InputType.Number" Adornment="Adornment.End" AdornmentColor="Color.Dark" AdornmentIcon="@Icons.Material.Filled.Groups" Required="true" />
                <MudTextField For="@(() => LodgingBookingDTO.Price)" @bind-Value="LodgingBookingDTO.Price" Label="Price" Adornment="Adornment.End" AdornmentColor="Color.Dark" AdornmentText="zł" Required="true" />
                <MudTextField For="@(() => LodgingBookingDTO.CheckInDate)" T="DateTime?" Format="yyyy-MM-dd" @bind-Value="LodgingBookingDTO.CheckInDate" Label="Check-In Date" InputType="InputType.Date" Required="true" />
                <MudTextField For="@(() => LodgingBookingDTO.CheckOutDate)" T="DateTime?" Format="yyyy-MM-dd" @bind-Value="LodgingBookingDTO.CheckOutDate" Label="Check-Out Date" InputType="InputType.Date" Required="true" />
            </DialogContent>
            <DialogActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
                <MudButton Variant="Variant.Outlined" OnClick="Cancel">Cancel</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}
@code {
    [Parameter]
    public LodgingBookingDTO LodgingBookingDTO { get; set; } = new LodgingBookingDTO();
    
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    private List<LodgingDTO>? _lodgings;

    private Func<LodgingDTO, string?> converter = p => p?.Name;

    protected override async Task OnInitializedAsync()
    {
        _lodgings = await HttpClient.GetFromJsonAsync<List<LodgingDTO>>("api/lodgings");
    }

    private void Save()
    {
        MudDialog.Close(DialogResult.Ok(LodgingBookingDTO));
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
