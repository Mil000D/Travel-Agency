@inject HttpClient HttpClient
@inject ISnackbar Snackbar

@if (TransportBookingDTO == null || _transports == null || _transports.Count == 0)
{
    <DialogSkeleton />
}
else
{
    <EditForm Model="TransportBookingDTO" OnValidSubmit="Save">
    <DataAnnotationsValidator />
        <MudDialog>
            <DialogContent>
                <MudSelect For="@(() => TransportBookingDTO.Transport)" T="TransportDTO" @bind-Value="TransportBookingDTO.Transport" ToStringFunc="@converter" Label="Select Transport" HelperText="Enum" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.AirportShuttle" AdornmentColor="Color.Dark" Required="true">
                    @foreach (TransportDTO item in _transports)
                    {
                        <MudSelectItem Value="@item">@item.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField For="@(() => TransportBookingDTO.Origin)" @bind-Value="TransportBookingDTO.Origin" Label="Origin" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.MyLocation" AdornmentColor="Color.Dark" Required="true" Immediate="true" />
                <MudTextField For="@(() => TransportBookingDTO.Destination)" @bind-Value="TransportBookingDTO.Destination" Label="Destination" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.LocationOn" AdornmentColor="Color.Dark" Required="true" Immediate="true" />
                <MudTextField For="@(() => TransportBookingDTO.Price)" @bind-Value="TransportBookingDTO.Price" Label="Price" Adornment="Adornment.End" AdornmentText="zł" AdornmentColor="Color.Dark" MaxLength="15" Required="true" />
                <MudTextField For="@(() => TransportBookingDTO.DepartureTime)" T="DateTime?" @bind-Value="TransportBookingDTO.DepartureTime" Format="s" Label="Departure Time" InputType="InputType.DateTimeLocal" Required="true" Immediate="true" />
                <MudTextField For="@(() => TransportBookingDTO.ArrivalTime)" T="DateTime?" @bind-Value="TransportBookingDTO.ArrivalTime" Format="s" Label="Arrival Time" InputType="InputType.DateTimeLocal" Required="true" Immediate="true" />
            </DialogContent>
            <DialogActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
                <MudButton Variant="Variant.Outlined" OnClick="Cancel">Cancel</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}
@code {
    [Parameter]
    public TransportBookingDTO TransportBookingDTO { get; set; } = new TransportBookingDTO();
    
    [Parameter]
    public List<TransportDTO> InitialTransports { get; set; } = new List<TransportDTO>();
    
    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; } = null!;

    private List<TransportDTO>? _transports;

    private Func<TransportDTO, string?>? converter = p => p?.Name;

    protected override async Task OnInitializedAsync()
    {
        var allTransports = await HttpClient.GetFromJsonAsync<List<TransportDTO>>("api/transports");

        if (allTransports != null)
        {
            _transports = allTransports
                .Where(t => !InitialTransports.Any(init => init.Id == t.Id))
                .ToList();
            if(TransportBookingDTO.Transport != null)
            {
                _transports.Add(TransportBookingDTO.Transport);
            }
            if (_transports.Count == 0 && TransportBookingDTO.Transport == null)
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                Snackbar.Add("All available transports have already been added.", Severity.Error);
                MudDialog.Cancel();
            }
        }
    }

    private void Save()
    {
        MudDialog.Close(DialogResult.Ok(TransportBookingDTO));
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
